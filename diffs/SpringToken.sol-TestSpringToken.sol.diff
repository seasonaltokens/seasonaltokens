10a11
> 
13c14
< // 'Spring Token' contract
---
> // Test Spring Token contract - same as Spring Token except:
15c16
< // ERC20 & ERC918 Mineable Token using Proof Of Work
---
> //
17c18
< // Symbol      : SPRING
---
> // Added setters for variables and a new variable to record allowance notifications
19c20
< // Name        : Spring Token
---
> //
21c22
< // Total supply: 33,112,800.00
---
> // Most internal functions have been made public to allow testing
23c24
< // Decimals    : 18
---
> //
25c26
< // Initial mining reward: 168
---
> // contractCreationTime not declared immutable
27c28
< // Fraction of total supply released before first halving: 1/5
---
> //
29c30,32
< // ----------------------------------------------------------------------------
---
> // Increased MINIMUM_TARGET to test upper limit of difficulty
> 
> //
30a34,36
> // Allowed transfers to the contract address to test the ability to rescue those funds
> 
> // ----------------------------------------------------------------------------
33a40
> contract TestSpringToken is ERC20Interface, ERC918, Owned {
35c42
< contract SpringToken is ERC20Interface, ERC918, Owned {
---
>     uint256 public notifiedAllowance;
57c64
<     uint256 public constant MINIMUM_TARGET = 2**16;
---
>     uint256 public constant MINIMUM_TARGET = (2**uint256(233) * 9) / 13; // was 2**16
61c68
<     uint256 public immutable contractCreationTime;
---
>     uint256 public contractCreationTime;
77a85
> 
142c150
<                                        uint256 currentTime) internal pure returns (uint256) {
---
>                                        uint256 currentTime) public pure returns (uint256) {
158c166
<                                     uint256 currentTime) internal pure returns (uint256) {
---
>                                     uint256 currentTime) public pure returns (uint256) {
169c177
<     function _giveRewards(uint256 totalReward) internal returns (uint256) {
---
>     function _giveRewards(uint256 totalReward) public returns (uint256) {
178c186
<                                         uint256 _previousMaxNumberOfRewards) internal {
---
>                                         uint256 _previousMaxNumberOfRewards) public {
199c207
<     function _getNewChallengeNumber(uint256 _tokensMinted) internal view returns (bytes32) {
---
>     function _getNewChallengeNumber(uint256 _tokensMinted) public view returns (bytes32) {
212c220
<     function _scheduledNumberOfRewards(uint256 currentTime) internal view returns (uint256) {
---
>     function _scheduledNumberOfRewards(uint256 currentTime) public view returns (uint256) {
219c227
<                                uint256 currentTime) internal pure returns (uint256){
---
>                                uint256 currentTime) public pure returns (uint256){
276c284
<     function _getMiningReward(uint256 _time) internal view returns (uint256) {
---
>     function _getMiningReward(uint256 _time) public view returns (uint256) {
330c338,339
<         require(to != address(0) && to != address(this), "Invalid address");
---
>         require(to != address(0), "Invalid address");
>         // was require(to != address(0) && to != address(this), "Invalid address");
455c464
<     function approveAndCall(address spender, uint256 tokens, bytes memory data) internal returns (bool success) {
---
>     function approveAndCall(address spender, uint256 tokens, bytes memory data) public returns (bool success) {
457c466,468
<         require(spender != address(0) && spender != address(this), "Invalid address");
---
>         // was require(spender != address(0) && spender != address(this), "Invalid address");
>         // approvals to the test contract are allowed for testing
>         require(spender != address(0), "Invalid address");
498c509,534
< }
\ No newline at end of file
---
> 
>     // functions for unit testing    
> 
>     function setMaxNumberOfRewards(uint256 _maxNumberOfRewards) public {
>         maxNumberOfRewardsPerMint = _maxNumberOfRewards;
>     }
> 
>     function setMiningTarget(uint256 _miningTarget) public {
>         miningTarget = _miningTarget;
>     }
> 
>     function setChallengeNumber(bytes32 _challengeNumber) public {
>         challengeNumber = _challengeNumber;
>     }
> 
>     function setBalance(address _address, uint256 balance) public {
>         balances[_address] = balance;
>     }
> 
>     function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public {
>         notifiedAllowance = tokens;
>         from; tokens; token; data;  // suppress compiler warnings about unused variables
>     }
> 
> 
> }
